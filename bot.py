import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes


load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")


# Вопросы теста
questions = [
    "Вспомните свой недавний опыт. Как вы реагируете, если допустили небольшую ошибку в своей работе?\n\n"
    "A. Испытываю разочарование и считаю, что результат полностью испорчен.\n"
    "B. Думаю, что мне нужно больше изучать эту тему, чтобы избежать подобных ошибок.\n"
    "C. Стараюсь решить проблему самостоятельно, не обращаясь за помощью.\n"
    "D. Удивляюсь, почему я не смог(ла) справиться сразу.\n"
    "E. Чувствую себя некомпетентным/ой во всех своих ролях (например, сотрудник/сотрудница, родитель, друг/подруга).",

    "Что вы чувствуете, когда кто-то хвалит вашу работу?\n\n"
    "А. Думаю, что похвала не заслужена, ведь в работе есть недостатки.\n"
    "B. Считаю, что они переоценивают мои знания и умения.\n"
    "C. Полностью игнорирую похвалу, ведь я сделал(а) это сам(а) и это моя обязанность.\n"
    "D. Чувствую, что похвала ничего не стоит, если я не справился/лась идеально и быстро.\n"
    "E. Думаю, что хвалят меня просто из вежливости.",

    "Если возникает сложная ситуация, просите ли вы о помощи окружающих?\n\n"
    "А. Мне неловко просить о помощи, так как это может показать мои слабости.\n"
    "B. Предпочитаю сначала изучить все сам, чтобы быть более компетентным.\n"
    "C. Никогда не прошу о помощи — лучше решу все сам(а).\n"
    "D. Думаю, что просьба о помощи показывает, что я недостаточно умный/умная.\n"
    "E. Мне кажется, что если я попрошу о помощи, то все поймут, что я не справляюсь.",

    "Представьте, что коллега (или кто-то еще) делает работу лучше вас. Какие мысли или чувства это вызывает?\n\n"
    "А. Думаю, что нужно было больше времени уделить качеству и безупречности своей работы.\n"
    "B. Чувствую, что не обладаю достаточными знаниями.\n"
    "C. Думаю, что должен/должна была справиться сам(а) и лучше.\n"
    "D. Уверен, что я не так умен/умна, как другие.\n"
    "E. Думаю, что не справляюсь с совмещением ролей или обязанностей.",

    "Опишите, какой конечный результат вы считаете по-настоящему идеальным?\n\n"
    "А. Полное отсутствие ошибок.\n"
    "B. Глубокое знание темы и способность ответить на любой вопрос.\n"
    "C. Завершение работы без посторонней помощи.\n"
    "D. Быстрое и легкое достижение цели.\n"
    "E. Способность одновременно успешно выполнять множество задач.",

    "Если вы не сразу справляетесь с задачей, то…\n\n"
    "А. Чувствую себя провалившимся/шейся и начинаю сомневаться в своих способностях.\n"
    "B. Думаю, что недостаточно изучил(а) тему.\n"
    "C. Считаю, что нужно было сделать все самому/самой.\n"
    "D. Думаю, что если мне нужно было много времени, значит, я некомпетентен/тна.\n"
    "E. Думаю, что я слишком перегружен(а).",
    
    "Когда вы готовитесь к серьёзному проекту или заданию, какие действия для вас в приоритете?\n\n"
    "А. Составляю план действий и стараюсь учесть каждую мелочь, чтобы исключить все возможные ошибки.\n"
    "B. Собираю и изучаю максимум информации, чтобы основательно подготовиться заранее.\n"
    "C. Предпочитаю держать всё под собственным контролем, поэтому изначально планирую обойтись без чьей-либо помощи.\n"
    "D. Думаю, что мне нужно быстро понять суть и сразу сделать все идеально.\n"
    "E. Стараюсь учесть все аспекты, чтобы справиться со всеми задачами.",

    "Когда видите, что кто-то из коллег или друзей добился впечатляющего успеха, что в первую очередь думаете?\n\n"
    "А. Думаю, что у них нет тех ошибок, которые я допускаю.\n"
    "B. Чувствую, что они гораздо лучше разбираются в теме.\n"
    "C. Думаю, что они все сделали сами, а мне это никогда не под силу.\n"
    "D. Думаю, что они быстрее и умнее меня.\n"
    "E. Уверен, что они лучше справляются с несколькими ролями одновременно.",

    "Что вы делаете, если получаете сложную задачу?\n\n"
    "А. Стараюсь продумать и учесть каждую деталь.\n"
    "B. Сначала изучаю тему, чтобы быть уверенным в своей компетентности.\n"
    "C. Планирую сделать все самостоятельно.\n"
    "D. Думаю, что мне нужно сразу справиться с задачей без проблем.\n"
    "E. Чувствую, что не смогу справиться со всем сразу.",

    "Если у вас несколько ролей (работник, родитель, друг/подруга и т.д.)как вы чувствуете себя, пытаясь совмещать их все?\n\n"
    "А. Чувствую, что везде допускаю ошибки.\n"
    "B. Считаю, что недостаточно знаю, чтобы быть хорошей в каждой роли.\n"
    "C. Думаю, что нужно справляться самому/самой, без помощи.\n"
    "D. Чувствую, что если я не справляюсь быстро, то я неудачник/неудачница.\n"
    "E. Считаю, что должен быть идеальным/ной во всех ролях."

]

# Описание типов
types_description = {
    "A": (
        "Перфекционист/ка: Вам важно, чтобы все было идеально, и даже крошечная ошибка может сильно расстроить. "
        "Вы держите огромную лупу над своими результатами, в то время как вокруг все в восторге от того, что вы уже сделали! "
        "Помните: маленькие недочёты — это не провал, а ступенька к росту.\n\n"
        "Небольшие рекомендации:\n"
        "- Представьте, что ваш внутренний «контролёр качества» ушёл в короткий отпуск. Хотя бы на вечер позвольте делам быть «достаточно хорошими».\n"
        "- Награждайте себя за выполненную работу, даже если она не на 200% идеальна. И да, шоколадка или интересный сериал считаются!\n\n"
        "Ссылка на мой канал: https://t.me/polina_ebashit - здесь про синдром самозванки и многие другие штуки, которые мешают работать без стресса и нервов.\n "
        "И помните, что после прохождения теста вы получаете 10% скидку на любое взаимодействие со мной: тренинг, мастермайнд-сессию или личную работу."
    ),
    "B": (
        "Эксперт: Вы стремитесь знать всё о своей области и чувствовать себя самой подкованной. "
        "Проблема в том, что «всё» — это бесконечность, а сил и времени у нас не бесконечное количество. "
        "Так что не вините себя, если где-то найдётся кусочек знаний, который вы ещё не освоили.\n\n"
        "Рекомендации:\n"
        "- Позвольте себе иногда быть «ученицей»/«учеником». Мастерство приходит, когда мы не боимся говорить: «Я пока этого не знаю, но с радостью научусь!»\n"
        "- Помните, что самая ценная часть экспертизы — умение делиться знаниями и спрашивать чужие.\n\n"
        "Ссылка на мой канал: https://t.me/polina_ebashit - здесь про синдром самозванки и многие другие штуки, которые мешают работать без стресса и нервов.\n"
        "И, конечно же, после прохождения теста вас ждёт 10% скидка на все мои программы, будь то тренинг, мастермайнд-сессии или личная работа."
    ),
    "C": (
        "Соло-герой/иня: Вы уверены, что всё нужно делать самостоятельно, иначе «это не ваше достижение». "
        "Часто перетрудитесь, потому что не позволяете окружающим облегчить вам задачу. "
        "Но, поверьте, принимать помощь — это не минус, а, наоборот, показатель мудрости и зрелости!\n\n"
        "Рекомендации (не совсем серьёзные!):\n"
        "- Потренируйтесь просить о маленьких услугах. Например, попросите друга/подругу принести вам чашку чая — и проверьте, не упало ли ваше чувство личной ценности.\n"
        "- Вспомните, что командные достижения обычно идут быстрее и легче, а энергия экономится для более глобальных целей.\n\n"
        "Ссылка на мой канал: https://t.me/polina_ebashit - здесь про синдром самозванки и многие другие штуки, которые мешают работать без стресса и нервов.\n"
        "Не забудьте о 10% скидке на все мои проекты после прохождения теста! Вместе мы сила, даже если вы предпочитаете одиночный поход."
    ),
    "D": (
        "Природный гений: Вы привыкли думать, что все должно получаться быстро и легко, ведь «у вас талант». "
        "Но, как назло, в мире есть задачи, которые требуют времени и усилий от каждого, даже если вы – чудо-женщина или супермен. "
        "Не стоит винить себя, если что-то не выходит с первого раза!\n\n"
        "Рекомендации:\n"
        "- Представьте, что вы только-только учитесь кататься на велосипеде: первые попытки часто сопровождаются падениями, зато потом — полная свобода!\n"
        "- Цените процесс обучения и дайте себе время на эксперименты. Даже гениям нужна практика.\n\n"
        "Ссылка на мой канал: https://t.me/polina_ebashit - здесь про синдром самозванки и многие другие штуки, которые мешают работать без стресса и нервов.\n"
        "После прохождения теста вы также получаете 10% скидку на тренинги, мастер-майнд или личные сессии со мной."
    ),
    "E": (
        "Сверхчеловек: Вы пытаетесь быть лучшим во всех сферах жизни сразу — от карьеры и спорта до идеального порядка дома. "
        "Но календарь начинает трещать по швам, а нервы на пределе. "
        "Умение выделять приоритеты и говорить «нет» — ваш новый костюм супергероини.\n\n"
        "Рекомендации:\n"
        "- Составьте список из всего, чем хотите заниматься, а затем смело вычеркните половину. Поверьте, мир не рухнет, а вы вздохнёте свободнее.\n"
        "- Разрешайте себе «быть просто человеком», а не сверхчеловеком, хотя бы по выходным. Перезаряжайтесь!\n\n"
        "Ссылка на мой канал: https://t.me/polina_ebashit - здесь про синдром самозванки и многие другие штуки, которые мешают работать без стресса и нервов.\n"
        "И да, помните про 10% скидку на любые мои программы после прохождения теста — это отличный шанс стать Сверхчеловеком с адекватным графиком!"
    )
}

# Клавиатура для ответов
answer_keyboard = [["A", "B", "C", "D", "E"]]
answer_markup = ReplyKeyboardMarkup(answer_keyboard, one_time_keyboard=True, resize_keyboard=True)
 
# Клавиатура для согласия/отказа
start_keyboard = [["Да", "Нет"]]
start_markup = ReplyKeyboardMarkup(start_keyboard, one_time_keyboard=True, resize_keyboard=True)



user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_data[user_id] = {"answers": [], "current_question": 0, "agreed": False}
    await update.message.reply_text(
        "Привет! Знаешь ли ты, что у синдрома самозванца существуют 5 подтипов? Я помогу определить твой и рассказать, что сделает тебя сильнее. Давай пройдем тест?",
        reply_markup=start_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id

    # Проверяем, есть ли пользователь в состоянии
    if user_id not in user_data:
        await update.message.reply_text("Напишите /start, чтобы начать тест.")
        return

    # Получаем данные пользователя
    user_state = user_data[user_id]
    current_question = user_state["current_question"]

    # Обрабатываем согласие на тест
    if not user_state["agreed"]:
        if update.message.text.lower() == "да":
            user_state["agreed"] = True
            await update.message.reply_text(
                "Отлично! Начнем тест. Вот первый вопрос:\n\n" + questions[0],
                reply_markup=answer_markup
            )
        else:
            await update.message.reply_text("Приходи обязательно, когда передумаешь!")
            del user_data[user_id]
        return

    # Проверяем правильность ответа
    answer = update.message.text.upper()
    if answer not in ["A", "B", "C", "D", "E"]:
        await update.message.reply_text("Пожалуйста, выберите один из вариантов: A, B, C, D или E.", reply_markup=answer_markup)
        return

    # Сохраняем ответ пользователя
    user_state["answers"].append(answer)

    # Если есть еще вопросы, задаем следующий
    if current_question + 1 < len(questions):
        user_state["current_question"] += 1
        next_question = questions[user_state["current_question"]]
        await update.message.reply_text(next_question, reply_markup=answer_markup)
    else:
        # Завершение теста
        result = calculate_result(user_state["answers"])
        del user_data[user_id]  # Очищаем данные пользователя
        await update.message.reply_text(
            f"Спасибо за прохождение теста! \nВаш тип: {result}\n\n Вы - {types_description[result]}"
        )

def calculate_result(answers):
    # Подсчитываем количество ответов каждого типа
    counts = {"A": 0, "B": 0, "C": 0, "D": 0, "E": 0}
    for answer in answers:
        counts[answer] += 1

    # Возвращаем тип с максимальным количеством ответов
    return max(counts, key=counts.get)

def main():
    # Инициализация приложения бота
    application = Application.builder().token(BOT_TOKEN).build()

    # Обработчики
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Запуск бота
    application.run_polling()

if __name__ == '__main__':
    main()